{"name":"Monero Examples","tagline":"compile-monero-09-on-xubuntu-16-04-beta-1","body":"# Compile Monero 0.9 on Xubuntu 16.04 x64 Beta 1\r\nThe example shows how to compile the current github version of [Monero](https://getmonero.org/), as of 06 Mar 2015, on [Xubuntu 16.04 x64 Beta 1](http://www.omgubuntu.co.uk/2016/02/ubuntu-16-04-beta-1-download-flavors).\r\n\r\nNote: Beta of Ubuntu 16.04 is not yet available. It will be released at the end of March.\r\n\r\n## Dependencies\r\nBefore proceeding with the compilation, the following packages are required:\r\n\r\n```bash\r\n# update Xubuntu's repository\r\nsudo apt-get update\r\n\r\n#install git to download latest Monero source code from github\r\nsudo apt-get install git\r\n\r\n# install dependencies to be able to compile Monero\r\nsudo apt-get install build-essential cmake libboost-all-dev miniupnpc libunbound-dev graphviz doxygen\r\n\r\n# or git and all dependencies in one command\r\n# sudo apt-get install git build-essential cmake libboost-all-dev miniupnpc libunbound-dev graphviz doxygen\r\n```\r\n\r\n## Compilation\r\nHaving the dependencies, we can download the current github Monero version and compile it as follows:\r\n\r\n```bash\r\n# download the latest bitmonero source code from github\r\ngit clone https://github.com/monero-project/bitmonero.git\r\n\r\n# go into bitmonero folder\r\ncd bitmonero/\r\n\r\n# compile\r\nmake # or make -j number_of_threads, e.g., make -j 2\r\n\r\n# alternatively `make release` can be used instead of `make`. This compiles\r\n# the source code without compiling unique tests which is faster, and can\r\n# avid problems if there are compilation errors with compiling the tests\r\n```\r\n\r\nPlease not that this is a current version of Monero on github, **not the offical and stable\r\nrelease**. Thus, as the development of Monero continues virtually on daily basis, sometimes\r\nthings can break, including the compilation procedure provided. To avoid this, please use the source code and binary files of the offical and stable release of Monero which can be found [here](https://github.com/monero-project/bitmonero/releases/latest).\r\n\r\n## Installation\r\nAfter successful compilation, the Monero binaries should be located in `./build/release/bin` as shown below:\r\n\r\n```bash\r\n./build/release/bin/\r\n├── bitmonerod\r\n├── blockchain_converter\r\n├── blockchain_dump\r\n├── blockchain_export\r\n├── blockchain_import\r\n├── cn_deserialize\r\n├── connectivity_tool\r\n├── simpleminer\r\n└── simplewallet\r\n```\r\n\r\nI usually move the binaries into `/opt/bitmonero/` folder. This can be done as follows:\r\n\r\n```bash\r\n# optional\r\nsudo mkdir /opt/bitmonero\r\nsudo mv -v ./build/release/bin/* /opt/bitmonero/\r\n```\r\n\r\nThis should result in:\r\n```bash\r\n/opt/bitmonero\r\n├── bitmonerod\r\n├── blockchain_converter\r\n├── blockchain_dump\r\n├── blockchain_export\r\n├── blockchain_import\r\n├── cn_deserialize\r\n├── connectivity_tool\r\n├── simpleminer\r\n└── simplewallet\r\n```\r\n\r\nNow we can start the Monero daemon, i.e., `bitmonerod`, and let it\r\ndownload the blockchain and synchronize itself with the Monero network. After that, you can run your the `simplewallet`.\r\n\r\n```bash\r\n# launch the Monero daemon and let it synchronize with the Monero network\r\n/opt/bitmonero/bitmonerod\r\n\r\n# launch the Monero wallet\r\n/opt/bitmonero/simplewallet\r\n```\r\n\r\n## Useful aliases (with rlwrap)\r\n`bitmonerod` and `simplewallet` do not have tab-compliton nor history.\r\nThis problem can be overcome using [rlwrap](https://github.com/hanslub42/rlwrap).\r\n\r\n```bash\r\n# install rlwrap\r\nsudo apt-get install rlwrap\r\n\r\n# download bitmonerod and simplewallet commands files\r\nwget -O ~/.bitmonero/monerocommands_bitmonerod.txt https://raw.githubusercontent.com/moneroexamples/compile-monero-09-on-xubuntu-16-04-beta-1/master/monerocommands_bitmonerod.txt\r\nwget -O ~/.bitmonero/monerocommands_simplewallet.txt https://raw.githubusercontent.com/moneroexamples/compile-monero-09-on-xubuntu-16-04-beta-1/master/monerocommands_simplewallet.txt\r\n\r\n# add aliases to .bashrc\r\necho \"alias moneronode='rlwrap -f ~/.bitmonero/monerocommands_simplewallet.txt /opt/bitmonero/bitmonerod'\" >> ~/.bashrc\r\necho \"alias monerowallet='rlwrap -f ~/.bitmonero/monerocommands_bitmonerod.txt /opt/bitmonero/simplewallet'\" >> ~/.bashrc\r\n\r\n# reload .bashrc\r\nsource ~/.bashrc\r\n```\r\n\r\nWith this, we can just start the daemon and wallet simply using\r\n`moneronode` and `monerowallet` commands. `rlwrap` will provide\r\ntab-complition and history for the monero programs.\r\n\r\n## Example screenshot\r\n\r\n![Ubuntu Screeshot](https://raw.githubusercontent.com/moneroexamples/compile-monero-09-on-xubuntu-16-04-beta-1/master/imgs/ubuntu_screen.jpg)\r\n\r\n\r\n## Monero C++11 development (optional)\r\nIf you want to develop your own C++11 programs on top of Monero 0.9,\r\nMonero's static libraries and headers will be needed. Below is shown\r\nhow they can be setup for use to write your own C++11 programs based\r\non Monero. An example of such a program is  [access-blockchain-in-cpp](https://github.com/moneroexamples/access-blockchain-in-cpp).\r\n\r\n\r\n### Monero static libraries\r\n\r\nWhen the compilation finishes, a number of static Monero libraries\r\nshould be generated. We will need them to link against in our C++11 programs.\r\n\r\nSince they are spread out over different subfolders of the `./build/` folder, it is easier to just copy them into one folder. I assume that\r\n `/opt/bitmonero-dev/libs` is the folder where they are going to be copied to.\r\n\r\n```bash\r\n# create the folder\r\nsudo mkdir -p /opt/bitmonero-dev/libs\r\n\r\n# find the static libraries files (i.e., those with extension of *.a)\r\n# and copy them to /opt/bitmonero-dev/libs\r\n# assuming you are still in bitmonero/ folder which you downloaded from\r\n# github\r\nsudo find ./build/ -name '*.a' -exec cp -v {} /opt/bitmonero-dev/libs  \\;\r\n ```\r\n\r\n This should results in the following file structure:\r\n\r\n ```bash\r\n/opt/bitmonero-dev/\r\n└── libs\r\n    ├── libblockchain_db.a\r\n    ├── libblocks.a\r\n    ├── libcommon.a\r\n    ├── libcrypto.a\r\n    ├── libcryptonote_core.a\r\n    ├── libcryptonote_protocol.a\r\n    ├── libdaemonizer.a\r\n    ├── libgtest.a\r\n    ├── libgtest_main.a\r\n    ├── liblmdb.a\r\n    ├── libminiupnpc.a\r\n    ├── libmnemonics.a\r\n    ├── libotshell_utils.a\r\n    ├── libp2p.a\r\n    ├── librpc.a\r\n    └── libwallet.a\r\n```\r\n\r\n### Monero headers\r\n\r\nNow we need to get Monero headers, as this is our interface to the\r\nMonero libraries. Folder `/opt/bitmonero-dev/headers` is assumed\r\nto hold the headers.\r\n\r\n```bash\r\n# create the folder\r\nsudo mkdir -p /opt/bitmonero-dev/headers\r\n\r\n# find the header files (i.e., those with extension of *.h)\r\n# and copy them to /opt/bitmonero-dev/headers.\r\n# but this time the structure of directories is important\r\n# so rsync is used to find and copy the headers files\r\nsudo rsync -zarv --include=\"*/\" --include=\"*.h\" --exclude=\"*\" --prune-empty-dirs ./ /opt/bitmonero-dev/headers\r\n ```\r\n\r\nThis should results in the following file structure:\r\n\r\n```bash\r\n# only src/ folder with up to 3 level nesting is shown\r\n\r\n/opt/bitmonero-dev/headers/src/\r\n├── blockchain_db\r\n│   ├── berkeleydb\r\n│   │   └── db_bdb.h\r\n│   ├── blockchain_db.h\r\n│   ├── db_types.h\r\n│   └── lmdb\r\n│       └── db_lmdb.h\r\n├── blockchain_utilities\r\n│   ├── blockchain_utilities.h\r\n│   ├── blocksdat_file.h\r\n│   ├── bootstrap_file.h\r\n│   ├── bootstrap_serialization.h\r\n│   └── fake_core.h\r\n├── blocks\r\n│   └── blocks.h\r\n├── common\r\n│   ├── base58.h\r\n│   ├── boost_serialization_helper.h\r\n│   ├── command_line.h\r\n│   ├── dns_utils.h\r\n│   ├── http_connection.h\r\n│   ├── i18n.h\r\n│   ├── int-util.h\r\n│   ├── pod-class.h\r\n│   ├── rpc_client.h\r\n│   ├── scoped_message_writer.h\r\n│   ├── unordered_containers_boost_serialization.h\r\n│   ├── util.h\r\n│   └── varint.h\r\n├── crypto\r\n│   ├── blake256.h\r\n│   ├── chacha8.h\r\n│   ├── crypto.h\r\n│   ├── crypto_ops_builder\r\n│   │   ├── api.h\r\n│   │   ├── crypto_int32.h\r\n│   │   ├── crypto-ops.h\r\n│   │   ├── crypto_sign.h\r\n│   │   ├── crypto_uint32.h\r\n│   │   ├── crypto_verify_32.h\r\n│   │   ├── include\r\n│   │   ├── ref10\r\n│   │   ├── ref10CommentedCombined\r\n│   │   └── sha512.h\r\n│   ├── crypto-ops.h\r\n│   ├── generic-ops.h\r\n│   ├── groestl.h\r\n│   ├── groestl_tables.h\r\n│   ├── hash.h\r\n│   ├── hash-ops.h\r\n│   ├── initializer.h\r\n│   ├── jh.h\r\n│   ├── keccak.h\r\n│   ├── oaes_config.h\r\n│   ├── oaes_lib.h\r\n│   ├── random.h\r\n│   ├── skein.h\r\n│   └── skein_port.h\r\n├── cryptonote_config.h\r\n├── cryptonote_core\r\n│   ├── account_boost_serialization.h\r\n│   ├── account.h\r\n│   ├── blockchain.h\r\n│   ├── blockchain_storage_boost_serialization.h\r\n│   ├── blockchain_storage.h\r\n│   ├── checkpoints_create.h\r\n│   ├── checkpoints.h\r\n│   ├── connection_context.h\r\n│   ├── cryptonote_basic.h\r\n│   ├── cryptonote_basic_impl.h\r\n│   ├── cryptonote_boost_serialization.h\r\n│   ├── cryptonote_core.h\r\n│   ├── cryptonote_format_utils.h\r\n│   ├── cryptonote_stat_info.h\r\n│   ├── difficulty.h\r\n│   ├── hardfork.h\r\n│   ├── miner.h\r\n│   ├── tx_extra.h\r\n│   ├── tx_pool.h\r\n│   └── verification_context.h\r\n├── cryptonote_protocol\r\n│   ├── blobdatatype.h\r\n│   ├── cryptonote_protocol_defs.h\r\n│   ├── cryptonote_protocol_handler_common.h\r\n│   └── cryptonote_protocol_handler.h\r\n├── daemon\r\n│   ├── command_line_args.h\r\n│   ├── command_parser_executor.h\r\n│   ├── command_server.h\r\n│   ├── core.h\r\n│   ├── daemon.h\r\n│   ├── executor.h\r\n│   ├── p2p.h\r\n│   ├── protocol.h\r\n│   ├── rpc_command_executor.h\r\n│   └── rpc.h\r\n├── daemonizer\r\n│   ├── daemonizer.h\r\n│   ├── posix_fork.h\r\n│   ├── windows_service.h\r\n│   └── windows_service_runner.h\r\n├── miner\r\n│   ├── simpleminer.h\r\n│   ├── simpleminer_protocol_defs.h\r\n│   └── target_helper.h\r\n├── mnemonics\r\n│   ├── electrum-words.h\r\n│   ├── english.h\r\n│   ├── german.h\r\n│   ├── italian.h\r\n│   ├── japanese.h\r\n│   ├── language_base.h\r\n│   ├── old_english.h\r\n│   ├── portuguese.h\r\n│   ├── russian.h\r\n│   ├── singleton.h\r\n│   └── spanish.h\r\n├── p2p\r\n│   ├── net_node_common.h\r\n│   ├── net_node.h\r\n│   ├── net_peerlist_boost_serialization.h\r\n│   ├── net_peerlist.h\r\n│   ├── p2p_protocol_defs.h\r\n│   └── stdafx.h\r\n├── platform\r\n│   ├── mingw\r\n│   │   └── alloca.h\r\n│   └── msc\r\n│       ├── alloca.h\r\n│       ├── inline_c.h\r\n│       ├── stdbool.h\r\n│       └── sys\r\n├── rpc\r\n│   ├── core_rpc_server_commands_defs.h\r\n│   ├── core_rpc_server_error_codes.h\r\n│   └── core_rpc_server.h\r\n├── serialization\r\n│   ├── binary_archive.h\r\n│   ├── binary_utils.h\r\n│   ├── crypto.h\r\n│   ├── debug_archive.h\r\n│   ├── json_archive.h\r\n│   ├── json_utils.h\r\n│   ├── serialization.h\r\n│   ├── string.h\r\n│   ├── variant.h\r\n│   └── vector.h\r\n├── simplewallet\r\n│   ├── password_container.h\r\n│   └── simplewallet.h\r\n└── wallet\r\n    ├── wallet2.h\r\n    ├── wallet_errors.h\r\n    ├── wallet_rpc_server_commands_defs.h\r\n    ├── wallet_rpc_server_error_codes.h\r\n    └── wallet_rpc_server.h\r\n```\r\n\r\nFull `/opt/bitmonero-dev/` tree is [here](https://github.com/moneroexamples/compile-monero-09-on-xubuntu-16-04-beta-1/blob/master/res/full_tree_bitmonero-dev.txt).\r\n\r\n\r\n## Other examples\r\nOther examples can be found on  [github](https://github.com/moneroexamples?tab=repositories).\r\nPlease know that some of the examples/repositotires are not\r\nfinished and may not work as intended.\r\n\r\n## How can you help?\r\n\r\nConstructive criticism, code and website edits are always good. They can be made through github.\r\n\r\nSome Monero are also welcome:\r\n```\r\n48daf1rG3hE1Txapcsxh6WXNe9MLNKtu7W7tKTivtSoVLHErYzvdcpea2nSTgGkz66RFP4GKVAsTV14v6G3oddBTHfxP6tU\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}